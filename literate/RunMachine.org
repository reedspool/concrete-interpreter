#+TITLE: Runnable Interpreter Machine
#+PROPERTY: header-args    :comments both :tangle ../src/RunMachine.js

Interpreter which has different modes of running, including "run" until completion, "pause", and "step," which just defers to the step-wise interpreter machine.

This machine accomplishes "run until completion" by continuously sending "STEP" to the step-wise machine until it halts.

* Preamble

#+begin_src js
import { Machine, send, forwardTo } from "xstate";
import { assign } from "@xstate/immer";
import * as StepwiseMachine from "./StepwiseMachine";
#+end_src

* Definition

Begin the definition, we'll explain each state in turn:

#+begin_src js
export const definition = {
    id: "RunInterpreter",
    strict: true,
#+end_src

The machine will begin in the live state, but the done state comes first because it is short and easy to comprehend. It's nice to know where you're headed in life.

The "done" state is the final state, and the whole result of the program will be the "done data" which we got from the child step-wise machine.

#+begin_src js
    initial: "live",
    states : {
        done: {
            type: "final",
            // TODO move this into stepwise
            data: (C, E) => E?.data?.activeFrame?.arguments
        },
#+end_src

There are always two parallel states while this machine is "live"; they are "mode" and "stepwise." The former determines if and how often we send "STEP" events to the invoked step-wise machine, and the latter manages that machine invocation.

When all the inner parallel states complete, the entire machine completes.

#+begin_src js
        live : {
            onDone: "#RunInterpreter.done",
            type: "parallel",
            states: {
                mode : {
#+end_src

"mode" starts out as paused. Send one of the described events to change to another mode from any mode.

- Pause: Nothing changes.
- Run: Keep sending "STEP" to the step-wise machine until it halts.

When we enter "run", we send a step to the machine, which is enough to set off the engine to keep going until it halts. More details about how this engine works are below.

#+begin_src js
                    initial : "pause",
                    states : {
                        pause : {},
                        run : {
                            entry: [ "sendStepToStepwiseMachine" ]
                        },
                    },
                    on : {
                        PAUSE : ".pause",
                        RUN   : ".run"
                    }
                },
#+end_src

This machine invokes the step-wise machine exactly once. To restart, just dispose of this whole machine and start a new one.

This machine is a thin wrapper around the child step-wise machine, so most events forward to the child.

An exception is "READY_TO_STEP", which comes from the child to tell us it is ready to receive another "STEP". Although this machine is responsible for stepping until the child machine halts, we do not want to overload it, so we wait for it to tell us it is ready before each step.

We only immediately send a step if "mode" is "run".

#+begin_src js
                stepwise: {
                    invoke : {
                        src : "stepwise",
                        id : "stepwise",
                        onDone : {
                            actions : [ "reportHalted", "doneRunner" ],
                            target: "#RunInterpreter.done"
                        },
                        onError : {
                            actions : [ "reportError", "doneRunner" ]
                        },
                    },
                    on : {
                        LOAD_PROGRAM : { actions: [ "forwardToStepwiseMachine" ] },
                        STEP : { actions: [ "forwardToStepwiseMachine" ] },
                        READY_TO_STEP : [
                            {
                                cond: "isModeRun",
                                actions: [ "sendStepToStepwiseMachine" ]
                            },
                            { actions: "noop" }
                        ]
                    },
                },
            },
        },
    },
#+end_src

Close the machine definition.

#+begin_src js
};
#+end_src

* Configuration

Start with actions.

#+begin_src js
export const config = {
    actions: {
        noop : () => {}, 
        sendStepToStepwiseMachine : send((C, E) => {
            return { type: "STEP" };
        }, { to: "stepwise" }),
        reportHalted: assign((C, E) => {
            C.halted = true;
        }),
        doneRunner : send((C, E) => {
            return { type : "DONE" }
        }),
        reportError: assign((C, E) => {
            C.error = E;
        }),
        forwardToStepwiseMachine : forwardTo("stepwise"),
#+end_src

Done with actions, now onto guards. Note guards appear in the above machine in "cond" fields. See XState docs for more.

#+begin_src js
    },
    guards: {
#+end_src

Determine whether we should automatically send a "STEP" event to the step-wise interpreter. First, we only step continuously when this machine is in the mode "run". Second, we do not want to send if the child machine has halted or erred.

TODO: The second part of this condition seems like a hack, is there a better way? Can we just look for existence of C.halted/C.error?

#+begin_src js
        isModeRun: (C, E, { state }) =>
            state.value?.live?.mode == "run" &&
                state.children.stepwise.state.value !== "halted" &&
                state.children.stepwise.state.value !== "error",
#+end_src


The crux of this machine is to invoke the step-wise interpreter as a service.

#+begin_src js
    },
    services: {
        stepwise: () => StepwiseMachine.init()
#+end_src

Close final config maps.

#+begin_src js
    }
}
#+end_src

* Initialize

Start with an empty context.

#+begin_src js
export const init = () => Machine(definition, config).withContext({});
#+end_src
