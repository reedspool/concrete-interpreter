#+TITLE: Stepwise Interpreter Machine
#+PROPERTY: header-args    :comments both :tangle ../src/StepwiseMachine.js

This XState Machine will interpret Concrete programs in a step-wise fashion, that is it will take only minimal steps forward each time it receives a =step= event from its parent. Its purpose is to facilitate step-wise debugging. To run a program continuously, a parent machine should invoke this and keep sending =step= events until the interpreter halts or errs.

* Preamble

#+begin_src js
import { Machine, sendParent, send } from "xstate";
import { assign } from "@xstate/immer";
import {immerable} from "immer";
import { Frame } from "./Frame";
import { Category } from "concrete-parser";
import { service as callUserTapeExecutorService } from "./executors/callUserTape";
const MAX_STEPS = 10000;
#+end_src

* Definition

Begin the definition, we'll explain each state in turn:

#+begin_src js
export const definition = {
    id: "StepwiseInterpreter",
    strict: true,
#+end_src

At any time until the interpreter finalizes, users can load new global implementations.

#+begin_src js
    on: {
        LOAD_GLOBAL_LABEL: { actions: [ "loadGlobalLabel" ] }
    },
#+end_src

Initialize key structures in machine context immediately upon creation.

#+begin_src js
    initial: "uninitialized",
    states: {
        uninitialized: {
            entry: [ "initialize" ],
            always: "empty"
        },
#+end_src

After initializing, the interpreter will always start in the "empty" state, because it doesn't have any code to run. It will proceed if it receives some code to run.

The "states" object is left open, because there are many more to define.

#+begin_src js
        empty: {
            on: {
                LOAD_PROGRAM: {
                    target: "run",
                    actions: [ "loadProgram" ]
                }
            }
        },
#+end_src

Once the program is loaded, we are going to be inside "run" until the program finishes or crashes.

The "run" state is complex. It always starts in the sub-state where it checks if the reader head is beyond the edge. This is important because the loaded program might be empty, in which case it should immediately halt.

If the tape is past the edge, then the current tape halts. This tape might have been called by another, indicated by the stack not being empty. Then, this is an implicit return.

If the tape is past the edge but the stack is empty, then the entire program is done.

Otherwise, we proceed to the normal "read" phase.

#+begin_src js
        run: {
            initial: "checkPastTapeEdge",
            states: {
                checkPastTapeEdge: {
                    entry: [ assign((C, E) => { C.steps += 1; if (C.steps > MAX_STEPS) throw new Error("max steps") })],
                    always: [
                        {
                            cond: "isBeyondEdgeAndStackIsNonEmpty",
                            target: "return"
                        },
                        {
                            cond: "isBeyondEdge",
                            target: "#StepwiseInterpreter.halted"
                        },
                        {
                            target: "read"
                        }
                    ]
                },
#+end_src

To interpret a Concrete program is to loop over each cell of the program's tape and take some action. Which action to take depends on which block is in the current cell. We record it before acting on that information to facilitate the intended "step-wise" nature.

At the beginning of the program, the reader head is at the first cell. Later, the program will return to this state but the reader head will have progressed to a different cell.

Upon proceeding, we branch depending on the category of that block.

#+begin_src js
                read: {
                    entry: [ "recordCurrentBlockAtHead", "reportReadyToStep" ],
                    on : {
                        STEP: [
                            {
                                cond: "isCurrentBlockValue",
                                target: "executeValue"
                            },
                            {
                                cond: "isCurrentBlockOp",
                                target: "executeOp"
                            },
                            {
                                actions: [ "reportErrorInvalidCategoryOfCurrentBlock" ],
                                target: "#StepwiseInterpreter.error"
                            }
                        ]
                    }
                },
#+end_src

Ops act on their arguments, or the tape around them. They are the blocks which /do/ things. What happens depends on the block itself, so we have to dispatch based on that block to a variety of executors.

#+begin_src js
                executeOp: {
                    invoke: {
                        id : "executor",
                        src : "dispatchOnExecutor",
                        // data : (C, E) => C,
                        onError : {
                            // Toggle on for executor error loggging
                            // actions: [(C, E) => console.log("Executor Error:", E)],
                            target : "#StepwiseInterpreter.error"
                        },
                        onDone: {
                            target: "advance",
                            actions: [ "clearArguments" ]
                        }
                    },
#+end_src

Op executors can do a huge variety of things during their invocation. All those things are received as events, and handled by this machine.

This first important action is a way to replicate the "onDone" above for those services which do not finalize themselves, like callback services.

#+begin_src js
                    on: {
                        DONE: { target: "advance", actions: [ "clearArguments" ] },
                        DONE_NO_ADVANCE: { target: "no_advance" },
                        EXPLICIT_RETURN: { target: "return" },
                        CLEAR_ARGUMENTS: { actions: [ "clearArguments" ] },
                        CALL_TAPE : { actions: [ "exec_callTape" ] },
                        PLACE_OP_RESULT : { actions: [ "exec_placeResult" ] },
                        PLACE_BLOCK_AT_ADDRESS : { actions: [ "exec_placeBlockAtAddress" ] },
                        MOVE_HEAD_TO_ADDRESS : { actions: [ "exec_moveHeadToAddress" ]},
                        REQUEST_BLOCK_AT_ADDRESS : { actions: [ "exec_reqBlockAtAddress" ] },
                    }
                },
#+end_src

If there is a comma preceding the current block, we grow the argument list by appending the current block. If there is no comma, the argument list will only contain the current block, dumping its previous contents.

#+begin_src js
                executeValue: {
                    entry: [ "reportReadyToStep" ],
                    on : {
                        STEP: [
                            {
                                cond: "isCommaAtHead",
                                target: "advance",
                                actions: [ "appendArgumentsWithCurrentBlock" ]
                            },
                            {
                                target: "advance",
                                actions: [ "replaceArgumentsWithCurrentBlock" ]
                            }
                        ]
                    }
                },
#+end_src

In general, once we've done whatever we're going to do with this block, we move one place to the right. There are exceptions to this, such as if a tape halts or if the head jumps.

After advancing, we go "back to the top" in the read-eval-advance cycle, first checking if we've moved past the edge of the tape and must halt.

#+begin_src js
                advance: {
                    entry: [ "reportReadyToStep" ],
                    on : {
                        STEP: {
                            target: "checkPastTapeEdge",
                            actions: [ "advanceHead" ]
                        }
                    }
                },
#+end_src

For those executors which do not advance the head, we still want the step machine to act the same way, so make the same exact state but which does not advance.

#+begin_src js
                no_advance: {
                    entry: [ "reportReadyToStep" ],
                    on : {
                        STEP: {
                            target: "checkPastTapeEdge",
                        }
                    }
                },
#+end_src

The machine enters the "return" state when a called tape is complete. If the tape has a result, place it where results go. Usually, this is immediately to the right of the call identifier which spawned the tape.

#+begin_src js
                "return" : {
                    entry: [ "reportReadyToStep" ],
                    on : {
                        STEP: {
                            target: "pop",
                            actions: [ "placeResultOnLowerFrame" ]
                        }
                    }
                },
#+end_src

Pop merely disposes of the current frame and replaces it with the frame on top of the stack. Then, it starts back at the top of the loop by checking past the edge for the old frame.

#+begin_src js
                pop : {
                    entry: [ "reportReadyToStep" ],
                    on : {
                        STEP: {
                            target: "advance",
                            actions: [ "popFrame" ]
                        }
                    }
                }
#+end_src

Closing "run" internal states map as well as itself.

#+begin_src js
            }
        },
#+end_src

A program which has completed interpretation normally will find itself, finally, in the "halted" state

When the program is halted, the result of the program is the current arguments list in the active frame.

#+begin_src js
        halted: {
            type : "final",
            entry : [ "haltFrame" ],
            data : (C) => ({ results: C.activeFrame.arguments })
        },
#+end_src

The other way a program can end is in the error state.

When the program errors, we assume it is from an executor, in which case the current event holds all the data about the error which arose.

We include the full context of the machine for debugging purposes.

#+begin_src js
        error: {
            type : "final",
            entry : [ "haltFrame" ],
            data : (C, E) => ({ error: E, context: C })
        },
#+end_src

We're done with states, so close the state map:

#+begin_src js
    },
#+end_src


And finally, close up the definition:

#+begin_src js
};
#+end_src

* Configuration

Start with actions.

#+begin_src js
export const config = {
    actions: {
#+end_src

When the machine starts, its context just an empty object. Fill it with some necessary structures.

#+begin_src js
        initialize : assign((C, E) => {
            C.steps = 0;
            C.globalLabelsToExecutorServices = {};
            C.nextFrameId = 0;
            C.deadFrameIdsToLabelsToClosedCells = {};
        }),
#+end_src

When the program loads, the source is an Abstract Syntax Tree. We need to create an active stack frame for it.

The rest of the stack is empty.

#+begin_src js
        loadProgram: assign((C, E) => {
            C.source = E.source;
            C.activeFrame = Frame(C.nextFrameId++, E.source.tape);
            C.stack = [];
        }),
#+end_src

Determine what is the category of the block at the head of the current cell.

#+begin_src js
        recordCurrentBlockAtHead : assign((C, E) => {
            C.currentBlock = C.activeFrame.getBlockAtHead();
        }),
#+end_src

Depending on the circumstances, we do or do not clear the current argument list before adding the current block. See "executeValue" above.

Either way, if the value is a ValueIdentifier, we have to resolve it to its proper value, but the =Frame= implementation will handle that.

#+begin_src js
        clearArguments: assign((C, E) => {
            C.activeFrame.clearArguments();
        }),
#+end_src

Arguments list can never include ValueIdentifiers, so always resolve them to their true value.

#+begin_src js
        appendArgumentsWithCurrentBlock : assign((C, E) => {
            let block = C.activeFrame.getBlockAtHead();
            if (block.is(Category.Value, "ValueIdentifier")) {
                block = Utils.resolveAndGet(C, block);
            }
            C.activeFrame.appendBlockToArguments(block);
        }),
        replaceArgumentsWithCurrentBlock : assign((C, E) => {
            C.activeFrame.clearArguments();

            let block = C.activeFrame.getBlockAtHead();
            if (block.is(Category.Value, "ValueIdentifier")) {
                block = Utils.resolveAndGet(C, block);
            }
            C.activeFrame.appendBlockToArguments(block);
        }),
#+end_src

Advance the head of the tape one to the right.

#+begin_src js
        advanceHead : assign((C, E) => {
            C.activeFrame.advance();
        }),
#+end_src

When the program ends or the current tape ends, we set the frame to halted.

#+begin_src js
        haltFrame : assign((C, E) => {
            C.activeFrame.halt();
        }),
#+end_src

When the interpreter encounters a run-time error, that is not an exception in the JavaScript run-time. Save an error object without throwing it.

#+begin_src js
        reportErrorInvalidCategoryOfCurrentBlock : assign((C, E) => {
            C.error = new Error("Invalid category of current block");
        }),
#+end_src

Let our parent know when they can safely send a "STEP" event. When our parent wants to successively step through the whole program, this will ensure they don't send too many "STEP" events. When our parent is a step debugger UI, if they don't receive this event in a very short period of time, they could move to a "working" state to show that the UI isn't ready to be stepped forward yet.

#+begin_src js
        reportReadyToStep : sendParent((C, E) => {
            return { type: "READY_TO_STEP" };
        }),
#+end_src

#+begin_src js
        loadGlobalLabel: assign((C, E) => {
            C.globalLabelsToExecutorServices[E.label] = E.service;
        }),
#+end_src

Pop the stack, disposing of the current frame and replacing it with the top of the stack.

Before we dispose of the current frame, close all its references and move any closed cells into their new home, in the interpreter context.

#+begin_src js
        popFrame : assign((C, E) => {
            const labelsToClosedCells = C.activeFrame.closeReferences();

            if (Object.values(labelsToClosedCells).length > 0) {
                C.deadFrameIdsToLabelsToClosedCells[C.activeFrame.id] = labelsToClosedCells;
            }

            C.activeFrame = C.stack.pop();
        }),
#+end_src

Place the result of the current frame on the frame below it. The result of the current frame is just the current arguments list.

For now, we are just placing the /first/ of that argument list. Perhaps in the future, multiple values of that argument list will match to a number of blanks, or multiple values will result in a tape of values.

If the arguments list is empty, do nothing.

#+begin_src js
        placeResultOnLowerFrame : assign((C, E) => {
            const [ result ] = C.activeFrame.arguments;
            if (! result) return;
            const lastFrame = C.stack[C.stack.length - 1];
            lastFrame.placeResult(result);
        }),
#+end_src

There are a huge number of actions that op block executors can take in the course of their invocation. They are all prefixed with `exec_`.

#+begin_src js
        exec_callTape: assign((C, E) => {
            C.stack.push(C.activeFrame);
            C.activeFrame = Frame(C.nextFrameId++, E.tape, E.arguments, C.activeFrame);
        }),
        exec_placeResult: assign((C, E) => {
            C.activeFrame.placeResult(E.block);
        }),
        exec_reqBlockAtAddress : send((C, E) => {
            const block = Utils.resolveAndGet(C, E.address);
            return { type : "RESPONSE_EXECUTOR", block };
        }, { to: "executor" }),
        exec_placeBlockAtAddress : assign((C, E) => {
            C.activeFrame.setBlockByLabel(E.address.identifier, E.block);
        }),
        exec_moveHeadToAddress : assign((C, E) => {
            C.activeFrame.moveHeadToLabel(E.address.identifier);
        }),
#+end_src

Done with actions, now onto guards. Note guards appear in the above machine in "cond" fields. See XState docs for more.

#+begin_src js
    },
    guards: {
#+end_src

Many guards are obvious from the perspective of the machine, we just defer them to other objects.

#+begin_src js
        isBeyondEdge : (C, E) => C.activeFrame.isBeyondEdge(),
        isBeyondEdgeAndStackIsNonEmpty : (C, E) => C.activeFrame.isBeyondEdge() && C.stack.length > 0,
        isCommaAtHead : (C, E) => C.activeFrame.isCommaAtHead(),
#+end_src

We need to check the category of the current block in order to branch execution.

#+begin_src js
        isCurrentBlockValue : (C, E) => C.currentBlock.is(Category.Value),
        isCurrentBlockOp : (C, E) => C.currentBlock.is(Category.Op),
#+end_src

Given the current block, return the executor service that matches it.

First, resolve the identifier to see where it points. If it points to a tape in the machine, then use our callUserTapeExecutorService. callUserTapeExecutorService takes an extra parameter in addition to the context, the resolved tape; this is for convenience, as otherwise it would have to resolve the same block again itself.

If it points to a global, then there must be an executor defined for that global.

Before returning, invoke the service creator with the current context. Because we are using Immer, the service won't be able to edit anything about the context.

#+begin_src js
    },
    services: {
        dispatchOnExecutor : (C, E) => {
            const block = Utils.resolveAndGet(C, C.currentBlock);

            if (block && block.is(Category.Value, "Tape")) {
                return callUserTapeExecutorService(C, block);
            }

            // Resolving went nowhere, so look for globals from current block.
            const { identifier } = C.currentBlock;
            const executor = 
                  C.globalLabelsToExecutorServices[identifier];

            if (! executor) throw new Error(`No executor found for identifier "${identifier}"`);

            return executor(C);
        }
#+end_src

Close final config map.

#+begin_src js
    }
}
#+end_src
* Utils

Utilities that will get used in multiple places in the machine context.

I tried making the machine's context a class with methods, but somewhere in XState internals it converted to a normal object.

In the future, perhaps all actions will just dispatch to this class, e.g. ={ myAction : XStateImmer.assign((C, E) => { C.x = E.y; }) }=, will just be =[ "myAction" ].forEach((action) => XStateImmer.assign((C, E) => C[action](E))=.

#+begin_src js
export const Utils = {
#+end_src

Any time we need to determine the location of a label, it will follow the same process. We call this process resolving, and the product a resolution. A resolution is a succinct description of a location in the entire program. The location is either on the stack in a live frame or in a closed cell in the interpreter.

#+begin_src js
    resolve(C, block, frame, options = { recurse: true }) {
        const { frameId, identifier: label } = block;
        let resolution = { frameId, label };

        // Is this block captured by a frame?
        if (frameId) {
            const labelsToClosedCells =
                C.deadFrameIdsToLabelsToClosedCells[frameId];

            // Is the frame dead and the value closed?
            if (labelsToClosedCells) {
                resolution.type = "closed";
            }
            // The frame is alive and the value is on the stack
            else {
                resolution.type = "stack";
            }
        }
        // This is not a captured value, so must derive from frame.references
        else {
            resolution.frameId = frame.id;
            const reference = frame.references[label];
            if (! reference) throw new Error(`Could not find reference for ${label}`);

            // Local/param values are always on their frame
            if (reference.type == "local" || reference.type == "param") {
                resolution.type = "stack";
            }
            // This is an upvalue
            else {
                const { frameId: referenceFrameId } = reference;
                const labelsToClosedCells =
                    C.deadFrameIdsToLabelsToClosedCells[
                        referenceFrameId];
                
                // Is the frame dead and the value closed?
                if (labelsToClosedCells) {
                    resolution.type = "closed";
                    resolution.frameId = referenceFrameId;
                }
                // The frame is alive and the value is on the stack
                else {
                    resolution.type = "stack";
                    resolution.frameId = referenceFrameId;
                }
            }
        }

#+end_src

Sometimes we want just the location of the given block, and other times we want to find the end block in a possible chain of value references.

#+begin_src js
        if (options.recurse) {
            block = Utils.getBlock(C, resolution);

            if (block && block.is(Category.Value, "ValueIdentifier")) {
                frame = Utils.getFrameById(C, resolution.frameId);

                resolution = Utils.resolve(C, block, frame, options);
            }
        }

        return resolution;
    },
#+end_src

Get an actual block given a resolution.

#+begin_src js
    getBlock(C, { type, label, frameId }) {
        if (type == "closed") {
            return C.deadFrameIdsToLabelsToClosedCells[frameId][label];
        }
        else if (type == "stack") {
            const frame = Utils.getFrameById(C, frameId);

            return frame.getBlockByLabel(label);
        }

        throw new Error(`Unable to get block for resolution ${type}-${label}-${frameId}`)
    },
#+end_src

Further utilities using the above.

#+begin_src js
    resolveAndGet(C, block) {
        return Utils.getBlock(C, Utils.resolve(C, block, C.activeFrame));
    },
#+end_src

Find a frame on the stack by its ID

#+begin_src js
    getFrameById(C, id) {
        if (C.activeFrame.id == id) return C.activeFrame;

        // ID's are unique, so order shouldn't matter.
        return C.stack.find((frame) => frame.id == id);
    },
#+end_src

Close utils.

#+begin_src js
}
#+end_src

* Initialize

Start with an empty context.

#+begin_src js
export const init = () => Machine(definition, config).withContext({});
#+end_src
