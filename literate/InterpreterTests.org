#+TITLE: Interpreter Tests
#+PROPERTY: header-args    :comments both :tangle ../test/Interpreter.test.js

* Preamble

#+begin_src js
import { interpretFile } from "../src/Interpreter";
#+end_src

* Simple

Simple empty source should not have a result.

#+begin_src js
it("Empty source produces no result", async () => {
    const input = "";
    const result = await interpretFile(input);
    expect(result).toEqual([]);
});
#+end_src

#+begin_src js
it("A number produces a JS number as a result", async () => {
    const input = "3355.4432";
    const [ result ] = await interpretFile(input);
    expect(result).toEqual(3355.4432);
});
#+end_src

#+begin_src js
it("A string produces a JS string as a result", async () => {
    const input = "\"Hello World!\"";
    const [ result ] = await interpretFile(input);
    expect(result).toEqual("Hello World!");
});
#+end_src

#+begin_src js
it("A blank produces a JS `null` as a result", async () => {
    const input = "_";
    const [ result ] = await interpretFile(input);
    expect(result).toEqual(null);
});
#+end_src

#+begin_src js
it("Multiple blocks with a comma separating them produces both as a result", async () => {
    const input = "1, 2";
    const result = await interpretFile(input);
    expect(result).toEqual([1, 2]);
});
#+end_src

#+begin_src js
it("Multiple blocks without a comma separating them produces only the latter as a result", async () => {
    const input = "1 2";
    const result = await interpretFile(input);
    expect(result).toEqual([2]);
});
#+end_src

* Add Executor
    
#+begin_src js
it("Simplest add executor", async () => {
    const input = "0 add! _";
    const [ result ] = await interpretFile(input);
    expect(result).toEqual(0);
});
#+end_src

#+begin_src js
it("Simple add executor", async () => {
    const input = "1, 2, 3 add! _";
    const [ result ] = await interpretFile(input);
    expect(result).toEqual(6);
});
#+end_src

#+begin_src js
it("Add executor works on strings too", async () => {
    const input = "\"Hello \", \"World!\" add! _";
    const [ result ] = await interpretFile(input);
    expect(result).toEqual("Hello World!");
});
#+end_src

#+begin_src js
it("Add executor works on numbers and strings, the same way JS does", async () => {
    const input = "\"Hello \", 250, \"th World!\" add! _";
    const [ result ] = await interpretFile(input);
    expect(result).toEqual("Hello " + 250 + "th World!");
});
#+end_src

#+begin_src js
it("Simple add operator executor", async () => {
    const input = "1, 2, 3 + _";
    const [ result ] = await interpretFile(input);
    expect(result).toEqual(6);
});
#+end_src

* Subtract Executor
    
#+begin_src js
it("Simplest subtract executor", async () => {
    const input = "0 subtract! _";
    const [ result ] = await interpretFile(input);
    expect(result).toEqual(0);
});
#+end_src

#+begin_src js
it("Simple subtract executor", async () => {
    const input = "3, 2, 1 subtract! _";
    const [ result ] = await interpretFile(input);
    expect(result).toEqual(0);
});
#+end_src

#+begin_src js
it("Simple minus operator executor", async () => {
    const input = "3, 2, 1 - _";
    const [ result ] = await interpretFile(input);
    expect(result).toEqual(0);
});
#+end_src

#+begin_src js
it("Subtract executor on strings produces NaN", async () => {
    const input = "\"Hello \", \"World!\" subtract! _";
    const [ result ] = await interpretFile(input);
    expect(result).toEqual(NaN);
});
#+end_src

#+begin_src js
it("Subtract executor on mixed numbers and strings produces NaN", async () => {
    const input = "\"Hello \", 250, \"th World!\" subtract! _";
    const [ result ] = await interpretFile(input);
    expect(result).toEqual(NaN);
});
#+end_src

* Multiply Executor

#+begin_src js
it("Simplest multiply executor", async () => {
    const input = "0 multiply! _";
    const [ result ] = await interpretFile(input);
    expect(result).toEqual(0);
});
#+end_src

#+begin_src js
it("Simple multiply executor", async () => {
    const input = "1, 2, 3, 4 multiply! _";
    const [ result ] = await interpretFile(input);
    expect(result).toEqual(24);
});
#+end_src

#+begin_src js
it("Simple multiply operator executor", async () => {
    const input = "1, 2, 3, 4 * _";
    const [ result ] = await interpretFile(input);
    expect(result).toEqual(24);
});
#+end_src

#+begin_src js
it("Multiply executor turns Strings to NaNs", async () => {
    const input = "\"Hello \", \"World!\" multiply! _";
    const [ result ] = await interpretFile(input);
    expect(result).toBeNaN();
});
#+end_src

#+begin_src js
it("Multiply expects at least one argument", async () => {
    const input = "multiply! _";
    expect(interpretFile(input)).rejects.toHaveProperty("error");
});
#+end_src

* Divide executor

#+begin_src js
it("Divide executor when result is integer", async () => {
    const input = "10, 2 divide! _";
    const [ result ] = await interpretFile(input);
    expect(result).toBe(5);
})
#+end_src

#+begin_src js
it("Divide executor when result is infinite decimal", async () => {
    const input = "10, 3 divide! _";
    const [ result ] = await interpretFile(input);
    expect(result).toBe(10 / 3);
})
#+end_src

#+begin_src js
it("Divide operator executor when result is infinite decimal", async () => {
    const input = "10, 3 / _";
    const [ result ] = await interpretFile(input);
    expect(result).toBe(10 / 3);
})
#+end_src

#+begin_src js
it("Divide by zero is JS Infinity", async () => {
    const input = "10, 0 divide! _";
    const [ result ] = await interpretFile(input);
    expect(result).toBe(Infinity);
})
#+end_src
* Modulus executor

#+begin_src js
it("Modulus executor when result is integer", async () => {
    const input = "10, 2 modulus! _";
    const [ result ] = await interpretFile(input);
    expect(result).toBe(0);
})
#+end_src

#+begin_src js
it("Modulus executor when result is infinite decimal", async () => {
    const input = "10, 3 modulus! _";
    const [ result ] = await interpretFile(input);
    expect(result).toBe(10 % 3);
})
#+end_src

#+begin_src js
it("Modulus operator executor when result is infinite decimal", async () => {
    const input = "10, 3 % 1";
    const [ result ] = await interpretFile(input);
    expect(result).toBe(10 % 3);
})
#+end_src

#+begin_src js
it("Modulus by zero is JS Infinity", async () => {
    const input = "10, 0 modulus! _";
    const [ result ] = await interpretFile(input);
    expect(result).toBe(NaN);
})
#+end_src
* Basic labels

#+begin_src js
it("Simple labeled block as result", async () => {
    const input = "abcd: 5 abcd";
    const [ result ] = await interpretFile(input);
    expect(result).toBe(5);
})
#+end_src

#+begin_src js
it("Labeled block points to another labeled block as result", async () => {
    const input = "abcd: efgh, efgh: 5 abcd";
    const [ result ] = await interpretFile(input);
    expect(result).toBe(5);
})
#+end_src

* Basic get and set executors

#+begin_src js
it("Get value at address", async () => {
    const input = "abcd: 5 @abcd get! _";
    const [ result ] = await interpretFile(input);
    expect(result).toBe(5);
})
#+end_src

#+begin_src js
it("Set value at address", async () => {
    const input = "5, @result set! _ result: _";
    const [ result ] = await interpretFile(input);
    expect(result).toBe(5);
})
#+end_src

#+begin_src js
it("Set value at address then get it", async () => {
    const input = "5, @result set! result: _ @result get! _";
    const [ result ] = await interpretFile(input);
    expect(result).toBe(5);
})
#+end_src

#+begin_src js
it("Infix set into an address", async () => {
    const input = "5 -> @result result: _ @result get! _";
    const [ result ] = await interpretFile(input);
    expect(result).toBe(5);
})
#+end_src

#+begin_src js
it("Infix set into a value identifier", async () => {
    const input = "42 -> result result: _";
    const [ result ] = await interpretFile(input);
    expect(result).toBe(42);
})
#+end_src

* Conditional and not conditional jumps

Jump into an argument list to an operator to prove that it actually jumped.

#+begin_src js
it("Unconditional jump", async () => {
    const input = "@end jump! 5, end: 3 add! _";
    const [ result ] = await interpretFile(input);
    expect(result).toBe(3);
})
#+end_src

Acts just like unconditional jump.

#+begin_src js
it("Conditional jump with truthy conditional", async () => {
    const input = "1, @end jump! 5, end: 3 add! _";
    const [ result ] = await interpretFile(input);
    expect(result).toBe(3);
})
#+end_src

Does not jump.

#+begin_src js
it("Conditional jump with falsy conditional doesn't jump", async () => {
    const input = "0, @end jump! 5, end: 3 add! _";
    const [ result ] = await interpretFile(input);
    expect(result).toBe(8);
})
#+end_src
* If

#+begin_src js
it("True if", async () => {
    const input = "1 if! { 5, @a set! } a: 4";
    const [ result ] = await interpretFile(input);
    expect(result).toBe(5);
})
#+end_src

#+begin_src js
it("false if", async () => {
    const input = "0 if! { 5, @a set! } a: 4";
    const [ result ] = await interpretFile(input);
    expect(result).toBe(4);
})
#+end_src

* If/Else

#+begin_src js
it("True if/else", async () => {
    const input = "1 if! { 5, @a set! } else! { 6, @a set! } a: 4";
    const [ result ] = await interpretFile(input);
    expect(result).toBe(5);
})
#+end_src

#+begin_src js
it("False if/else", async () => {
    const input = "0 if! { 5, @a set! } else! { 6, @a set! } a: 4";
    const [ result ] = await interpretFile(input);
    expect(result).toBe(6);
})
#+end_src

* While
:PROPERTIES:
:CREATED:  [2021-06-02 Wed 20:13]
:END:

#+begin_src js
it("Simple while loop", async () => {
    const input = "a: 3 while! { a, b + _, @b set! a, 1 - _, @a set! } b: 0";
    const [ result ] = await interpretFile(input);
    expect(result).toBe(6);
})
#+end_src

* Equal executor

#+begin_src js
it("Equal executor when true", async () => {
    const input = "5, 5 equal! _";
    const [ result ] = await interpretFile(input);
    expect(result).toBe(1);
})
#+end_src

#+begin_src js
it("Equal operator executor when true", async () => {
    const input = "5, 5 = _";
    const [ result ] = await interpretFile(input);
    expect(result).toBe(1);
})
#+end_src

#+begin_src js
it("Equal executor when false", async () => {
    const input = "5, 42 equal! _";
    const [ result ] = await interpretFile(input);
    expect(result).toBe(0);
})
#+end_src

* And executor

#+begin_src js
it("And executor when true", async () => {
    const input = "1, 2, 3 and! _";
    const [ result ] = await interpretFile(input);
    expect(result).toBe(1);
})
#+end_src

#+begin_src js
it("And operator executor when true", async () => {
    const input = "1, 2, 3 & _";
    const [ result ] = await interpretFile(input);
    expect(result).toBe(1);
})
#+end_src

#+begin_src js
it("And executor when false", async () => {
    const input = "1, 0, 3 and! _";
    const [ result ] = await interpretFile(input);
    expect(result).toBe(0);
})
#+end_src

* Or executor

#+begin_src js
it("Or executor when true", async () => {
    const input = "1, 0, 3 or! _";
    const [ result ] = await interpretFile(input);
    expect(result).toBe(1);
})
#+end_src

#+begin_src js
it("Or operator executor when true", async () => {
    const input = "1, 0, 3 | _";
    const [ result ] = await interpretFile(input);
    expect(result).toBe(1);
})
#+end_src

#+begin_src js
it("Or executor when false", async () => {
    const input = "0, 0, 0 or! _";
    const [ result ] = await interpretFile(input);
    expect(result).toBe(0);
})
#+end_src

* Not executor

#+begin_src js
it("Not executor when true", async () => {
    const input = "0 not! _";
    const [ result ] = await interpretFile(input);
    expect(result).toBe(1);
})
#+end_src

#+begin_src js
it("Not operator executor when true", async () => {
    const input = "0 ~ _";
    const [ result ] = await interpretFile(input);
    expect(result).toBe(1);
})
#+end_src

#+begin_src js
it("Not executor when false", async () => {
    const input = "42 not! _";
    const [ result ] = await interpretFile(input);
    expect(result).toBe(0);
})
#+end_src

* Less Than Executor

#+begin_src js
it("Less than executor when true", async () => {
    const input = "1, 2 lessThan! _";
    const [ result ] = await interpretFile(input);
    expect(result).toBe(1);
})
#+end_src

#+begin_src js
it("Less than operator executor when true", async () => {
    const input = "1, 2 < _";
    const [ result ] = await interpretFile(input);
    expect(result).toBe(1);
})
#+end_src

#+begin_src js
it("Less than executor when false", async () => {
    const input = "5, 2 lessThan! _";
    const [ result ] = await interpretFile(input);
    expect(result).toBe(0);
})
#+end_src
* Greater Than Executor

#+begin_src js
it("Greater than executor when true", async () => {
    const input = "2, 1 greaterThan! _";
    const [ result ] = await interpretFile(input);
    expect(result).toBe(1);
})
#+end_src

#+begin_src js
it("Greater than operator executor when true", async () => {
    const input = "2, 1 > _";
    const [ result ] = await interpretFile(input);
    expect(result).toBe(1);
})
#+end_src

#+begin_src js
it("Greater than executor when false", async () => {
    const input = "1, 2 greaterThan! _";
    const [ result ] = await interpretFile(input);
    expect(result).toBe(0);
})
#+end_src

* Call a tape executor

#+begin_src js
it("Call an empty tape has no effect", async () => {
    const input = "[ ] call! _";
    const [ result ] = await interpretFile(input);
    expect(result).toBe(null);
})
#+end_src

#+begin_src js
it("Call an empty tape with params has no effect", async () => {
    const input = "()[] call! _";
    const [ result ] = await interpretFile(input);
    expect(result).toBe(null);
})
#+end_src

#+begin_src js
it("Call a tape puts first implicit return result in right place", async () => {
    const input = "[ 3, 4 ] call! _";
    const [ result ] = await interpretFile(input);
    expect(result).toBe(3);
})
#+end_src

#+begin_src js
it("Call a tape with an explicit return puts result in right place", async () => {
    const input = "[ 3, 4 add! _ return! 5, 6 ] call! _";
    const [ result ] = await interpretFile(input);
    expect(result).toBe(7);
})
#+end_src

#+begin_src js
it("Call a tape with parameters", async () => {
    const input = "5, (n)[ n, n multiply! _ ] call! _";
    const [ result ] = await interpretFile(input);
    expect(result).toBe(25);
})
#+end_src

#+begin_src js
it("Call a tape with a closure", async () => {
    const input = "42, (n)[ [ n ] ] call! _ call! _";
    const [ result ] = await interpretFile(input);
    expect(result).toBe(42);
})
#+end_src

#+begin_src js
it("Call a tape with a user-defined call executor", async () => {
    const input = "a:(n)[ [ n ] ] _ _ _ 42, a! b:_ _ _ _ b! _";
    const [ result ] = await interpretFile(input);
    expect(result).toBe(42);
})
#+end_src

#+begin_src js
it("Call a tape with a user-defined operator call executor", async () => {
    const input = "=>:(n)[ [ n ] ] _ _ _ 42, => b:_ _ _ _ b! _";
    const [ result ] = await interpretFile(input);
    expect(result).toBe(42);
})
#+end_src

#+begin_src js
it("Call a tape which sets a value outside its scope", async () => {
    const input = "a: 5 [ 10, @a set! ] call! a, a * _";
    const [ result ] = await interpretFile(input);
    expect(result).toBe(100);
})
#+end_src

#+begin_src js
it("Call a tape which references a value outside its scope", async () => {
    const input = "a: 5 [ a, a * _ ] call! 50";
    const [ result ] = await interpretFile(input);
    expect(result).toBe(25);
})
#+end_src

* Reference closures
#+begin_src js
it("Call an empty tape has no effect", async () => {
    const input = "[ ] call! _";
    const [ result ] = await interpretFile(input);
    expect(result).toBe(null);
})
#+end_src
* Inline tapes
#+begin_src js
it("Simple Inline tape", async () => {
    const input = "{ 1, 2 + _ }, 4 + _";
    const [ result ] = await interpretFile(input);
    expect(result).toBe(7);
})
#+end_src

#+begin_src js
it("Inline tape can reference value outside it", async () => {
    const input = "a: 5 { a, 1 + _ }, 7 + _";
    const [ result ] = await interpretFile(input);
    expect(result).toBe(13);
})
#+end_src

#+begin_src js
it("Inline tape can set value outside it", async () => {
    const input = "a: 5 { 11, @a set! } a, a * _ ";
    const [ result ] = await interpretFile(input);
    expect(result).toBe(121);
})
#+end_src

* Aliasing blocks

#+begin_src js
it.skip("Alias a global executor still works", async () => {
    const input = "abcd: greaterThan 1, 2 abcd! _";
    const [ result ] = await interpretFile(input);
    expect(result).toBe(0);
})
#+end_src
