#+TITLE: Interpreter Tests
#+PROPERTY: header-args    :comments both :tangle ../test/Interpreter.test.js

* Preamble

#+begin_src js
import { interpretFile } from "../src/Interpreter";
#+end_src

* Simple

Simple empty source should not have a result.

#+begin_src js
it("Empty source produces no result", async () => {
    const input = "";
    const result = await interpretFile(input);
    expect(result).toEqual([]);
});
#+end_src

#+begin_src js
it("A number produces a JS number as a result", async () => {
    const input = "3355.4432";
    const [ result ] = await interpretFile(input);
    expect(result).toEqual(3355.4432);
});
#+end_src

#+begin_src js
it("A string produces a JS string as a result", async () => {
    const input = "\"Hello World!\"";
    const [ result ] = await interpretFile(input);
    expect(result).toEqual("Hello World!");
});
#+end_src

#+begin_src js
it("A blank produces a JS `null` as a result", async () => {
    const input = "_";
    const [ result ] = await interpretFile(input);
    expect(result).toEqual(null);
});
#+end_src

#+begin_src js
it("Multiple blocks with a comma separating them produces both as a result", async () => {
    const input = "1, 2";
    const result = await interpretFile(input);
    expect(result).toEqual([1, 2]);
});
#+end_src

#+begin_src js
it("Multiple blocks without a comma separating them produces only the latter as a result", async () => {
    const input = "1 2";
    const result = await interpretFile(input);
    expect(result).toEqual([2]);
});
#+end_src

* Add Executor
    
#+begin_src js
it("Simplest add executor", async () => {
    const input = "0 add! _";
    const [ result ] = await interpretFile(input);
    expect(result).toEqual(0);
});
#+end_src

#+begin_src js
it("Simple add executor", async () => {
    const input = "1, 2, 3 add! _";
    const [ result ] = await interpretFile(input);
    expect(result).toEqual(6);
});
#+end_src

#+begin_src js
it("Add executor works on strings too", async () => {
    const input = "\"Hello \", \"World!\" add! _";
    const [ result ] = await interpretFile(input);
    expect(result).toEqual("Hello World!");
});
#+end_src

#+begin_src js
it("Add executor works on numbers and strings, the same way JS does", async () => {
    const input = "\"Hello \", 250, \"th World!\" add! _";
    const [ result ] = await interpretFile(input);
    expect(result).toEqual("Hello " + 250 + "th World!");
});
#+end_src

* Multiply Executor

#+begin_src js
it("Simplest multiply executor", async () => {
    const input = "0 multiply! _";
    const [ result ] = await interpretFile(input);
    expect(result).toEqual(0);
});
#+end_src

#+begin_src js
it("Simple multiply executor", async () => {
    const input = "1, 2, 3, 4 multiply! _";
    const [ result ] = await interpretFile(input);
    expect(result).toEqual(24);
});
#+end_src

#+begin_src js
it("Multiply executor turns Strings to NaNs", async () => {
    const input = "\"Hello \", \"World!\" multiply! _";
    const [ result ] = await interpretFile(input);
    expect(result).toBeNaN();
});
#+end_src

#+begin_src js
it("Multiply expects at least one argument", async () => {
    const input = "multiply! _";
    expect(interpretFile(input)).rejects.toHaveProperty("error");
});
#+end_src

* Basic labels

#+begin_src js
it("Simple labeled block as result", async () => {
    const input = "abcd: 5 abcd";
    const [ result ] = await interpretFile(input);
    expect(result).toBe(5);
})
#+end_src

#+begin_src js
it("Labeled block points to another labeled block as result", async () => {
    const input = "abcd: efgh, efgh: 5 abcd";
    const [ result ] = await interpretFile(input);
    expect(result).toBe(5);
})
#+end_src
